const express = require('express');
const app = express();
const path = require('path');
const bodyParser = require('body-parser');
const fs = require('fs');
const TelegramBot = require('node-telegram-bot-api');
const dotenv = require('dotenv');
dotenv.config();
const TOKEN = '7434998252:AAGvjoW9XAUQUbgNwN0YQs7cbsSMrooX8BA';
const bot = new TelegramBot(TOKEN, { polling: true });
const usersFilePath = path.join(__dirname, 'users.json');
let users = [];
const mongoose = require('mongoose');
const env = require('dotenv').config();
const PORT = process.env.PORT || 3000;
const Homework = require('./models/Homework');
const Schedule = require('./models/Schedule');
const Events = require('./models/Events');
mongoose.connect(`mongodb+srv://zubalana0:${process.env.PASSWORD}@cluster0.niyre.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0`)
    .then(() => {
        console.log('Connected to MongoDB');
    })
    .catch((error) => {
        console.error('Error connecting to MongoDB:', error);
    });
if (fs.existsSync(usersFilePath)) {
    users = JSON.parse(fs.readFileSync(usersFilePath, 'utf8'));
}
app.use(express.static(path.join(__dirname, 'public')));
app.use(bodyParser.json());
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    if (!users.includes(chatId)) {
        users.push(chatId);
        fs.writeFileSync(usersFilePath, JSON.stringify(users));
    }

    const options = {
        reply_markup: {
            keyboard: [
                [{ text: '–î–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è' }, { text: '–ü–æ–¥—ñ—ó' }],
                [{ text: '–°—Ç—Ä—É–∫—Ä—É—Ä–∞ –Ω–∞–≤—á–∞–Ω–Ω—è'}, { text: '–†–æ–∑–∫–ª–∞–¥ –¥–∑–≤—ñ–Ω–∫—ñ–≤'}],
                [{ text: '–ö–æ–ª–∏ –≤–∂–µ –≤–∏—Ö—ñ–¥–Ω—ñ?'}],
            ],
            resize_keyboard: true
        }
    };
    bot.sendMessage(chatId, '\n –ü—Ä–∏–≤—ñ—Ç! –ë–æ—Ç –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ. \n–û—Ç—Ä–∏–º—É–π—Ç–µ –≤—Å—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –¥–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è, –¥–µ–¥–ª–∞–π–Ω–∏ —Ç–∞ –ø–æ–¥—ñ—ó! \n–í–∞–∂–ª–∏–≤–æ: –ø—Ä–∏ –ø–µ—Ä–µ–Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å–µ—Ä–≤–µ—Ä—É, –º–æ–∂–ª–∏–≤–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ –∫—ñ–ª—å–∫–æ—Ö —Ö–≤–∏–ª–∏–Ω. \n–£ —Ä–∞–∑—ñ –≤–∏–Ω–∏–∫–Ω–µ–Ω–Ω—è –±—É–¥—å-—è–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º —É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—ñ —á–∏ –Ω–µ–¥–æ—Å—Ç–∞—á—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–á, –ø–æ–≤—ñ–¥–æ–º–ª—è–π—Ç–µ: @yanavesq.', options);
});

const rateLimitMap = {};
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const userIdToLimit = 1325245467;
    if (chatId === userIdToLimit) {
        const currentTime = Date.now();
        if (rateLimitMap[chatId] && (currentTime - rateLimitMap[chatId]) < 60000) {
            bot.sendMessage(chatId, '–í–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –ª–∏—à–µ –æ–¥–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞ —Ö–≤–∏–ª–∏–Ω—É.');
            return; 
        }
        rateLimitMap[chatId] = currentTime;
    }

    if (msg.text === '–î–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è') {
        try {
            const homework = await Homework.findOne().lean();
            const schedule = await Schedule.findOne().lean();

            if (homework && schedule) {
                const daysInUkrainian = {
                    monday: '–ü–æ–Ω–µ–¥—ñ–ª–æ–∫',
                    tuesday: '–í—ñ–≤—Ç–æ—Ä–æ–∫',
                    wednesday: '–°–µ—Ä–µ–¥–∞',
                    thursday: '–ß–µ—Ç–≤–µ—Ä',
                    friday: '–ü‚Äô—è—Ç–Ω–∏—Ü—è'
                };

                let homeworkMessage = '<b>–î–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è —Ç–∞ —Ä–æ–∑–∫–ª–∞–¥ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å:</b>\n\n';
                ['monday', 'tuesday', 'wednesday', 'thursday', 'friday'].forEach(day => {
                    if (homework[day] || schedule[day]) {
                        homeworkMessage += `\n<b>${daysInUkrainian[day]}:</b>\n`;
                        
                        if (schedule[day]) {
                            schedule[day].forEach((lesson, index) => {
                                homeworkMessage += ` ${index + 1}. <b>${lesson.subject ? lesson.subject + ': ' : ''}</b>`;
                                
                                if (homework[day] && homework[day].lessons[index] && homework[day].lessons[index].homework) {
                                    homeworkMessage += `${homework[day].lessons[index].homework}`;
                                }
                                
                                homeworkMessage += `\n`;
                            });
                        }
                    }
                });

                bot.sendMessage(chatId, homeworkMessage, { parse_mode: 'HTML' }); 
            } else {
                bot.sendMessage(chatId, '–î–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è –∞–±–æ —Ä–æ–∑–∫–ª–∞–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.', { parse_mode: 'HTML' });
            }
        } catch (error) {
            console.error('Error retrieving homework or schedule:', error);
            bot.sendMessage(chatId, '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–æ–º–∞—à–Ω—å–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è –∞–±–æ —Ä–æ–∑–∫–ª–∞–¥—É.', { parse_mode: 'HTML' });
        }
    }else if (msg.text === '–ü–æ–¥—ñ—ó') {
        try{
            bot.sendMessage(chatId, '–ù–∞–π–±–ª–∏–∂—á—ñ –ø–æ–¥—ñ—ó: \n\n3 –∂–æ–≤—Ç–Ω—è, —á–µ—Ç–≤–µ—Ä: <b>–Ø—Ä–º–∞—Ä–∫–∞ —Ç–∞ –∫–æ–∑–∞—Ü—å–∫—ñ –∑–∞–±–∞–≤–∏</b> \n3 –∂–æ–≤—Ç–Ω—è, –ø‚Äô—è—Ç–Ω–∏—Ü—è: <b>–î–µ–Ω—å –≤—á–∏—Ç–µ–ª—è</b>', { parse_mode: 'HTML' });
        }catch(err){
            console.log(err)
        }
        // try {
        //     const events = await Events.find().lean();
        //     if (events.length > 0) {
        //         let eventsMessage = '<b>–ù–∞–π–±–ª–∏–∂—á—ñ –ø–æ–¥—ñ—ó:</b>\n\n';
        //         events.forEach(event => {
        //             const formattedDate = new Date(event.date).toLocaleDateString('uk-UA', {
        //                 weekday: 'long',
        //                 year: 'numeric',
        //                 month: 'long',
        //                 day: 'numeric'
        //             });
        //             eventsMessage += `${formattedDate}: <b>${event.name}</b>\n`;
        //             if (event.details) {
        //                 eventsMessage += `–î–µ—Ç–∞–ª—ñ: ${event.details}\n`;
        //             }
        //             eventsMessage += '\n';
        //         });
        //         bot.sendMessage(chatId, eventsMessage, { parse_mode: 'HTML' });
        //     } else {
        //         bot.sendMessage(chatId, '–ù–µ–º–∞—î –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏—Ö –ø–æ–¥—ñ–π.', { parse_mode: 'HTML' });
        //     }
        // } catch (error) {
        //     console.error('Error retrieving events:', error);
        //     bot.sendMessage(chatId, '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–æ–¥—ñ–π.', { parse_mode: 'HTML' });
        // }
    }else if (msg.text === '–°—Ç—Ä—É–∫—Ä—É—Ä–∞ –Ω–∞–≤—á–∞–Ω–Ω—è') {
        try{
            bot.sendMessage(chatId, 
                '–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–∞–≤—á–∞–ª—å–Ω–æ–≥–æ —Ä–æ–∫—É 2024-2025: \n\n<b>–ù–∞–≤—á–∞–Ω–Ω—è:</b> 02.09.2024-06.06.2025 \n<b>–ö–∞–Ω—ñ–∫—É–ª–∏:</b> \n ‚Ä¢–æ—Å—ñ–Ω–Ω—ñ: 28.10-03.11 ( 1 —Ç–∏–∂–¥–µ–Ω—å ) \n ‚Ä¢–∑–∏–º–æ–≤—ñ: 20.12.2024-12.01.2025 ( 3 —Ç–∏–∂–Ω—ñ ) \n ‚Ä¢–≤–µ—Å–Ω—è–Ω—ñ: 26.03-30.03 ( 4 –¥–Ω—ñ ) \n ‚Ä¢–≤–µ–ª–∏–∫–æ–¥–Ω—ñ: 18.04-21.04 ( 3 –¥–Ω—ñ ) \n ‚Ä¢–ª—ñ—Ç–Ω—ñ: 09.06-31.08 ( –º–∞–π–∂–µ 3 –º—ñ—Å—è—Ü—ñ, 2 –º—ñ—Å—è—Ü—ñ —ñ 21 –¥–µ–Ω—å )', { parse_mode: 'HTML' }
            )
        }catch(err){ 
            console.log(err)
        }
    }else if (msg.text === '–†–æ–∑–∫–ª–∞–¥ –¥–∑–≤—ñ–Ω–∫—ñ–≤') {
        try{
            bot.sendMessage(chatId, 
                '–†–æ–∑–∫–ª–∞–¥ –¥–∑–≤—ñ–Ω–∫—ñ–≤: \n 1 —É—Ä–æ–∫: <b>8.30-9.15</b> \n 2 —É—Ä–æ–∫: <b>9.20-10.05</b> \n 3 —É—Ä–æ–∫: <b>10.15-11.00</b> \n 4 —É—Ä–æ–∫: <b>11.15-12.00</b> \n 5 —É—Ä–æ–∫: <b>12.15-13.00</b> \n 6 —É—Ä–æ–∫: <b>13.05-13.50</b> \n 7 —É—Ä–æ–∫: <b>13.55-14.40</b> \n 8 —É—Ä–æ–∫: <b>14.45-15.30</b> \n 9 —É—Ä–æ–∫: <b>15.35-16.20 (?)</b> \n', { parse_mode: 'HTML' }
            )
        }catch(err){ 
            console.log(err)
        }
    }else if (msg.text === '–ö–æ–ª–∏ –≤–∂–µ –≤–∏—Ö—ñ–¥–Ω—ñ?') {
        try {
            function getCountdownMessage() {
                let now = new Date();
                let today = now.getDay();
                
                let nextSaturday = new Date(now);
                if (today !== 6) { 
                    nextSaturday.setDate(now.getDate() + (6 - today));
                }
                nextSaturday.setHours(0, 0, 0, 0);
            
                let nextMonday = new Date(nextSaturday);
                nextMonday.setDate(nextSaturday.getDate() + 2);
                
                let targetTime;
                if (today === 6 || today === 0) { 
                    targetTime = nextMonday; 
                } else {
                    targetTime = nextSaturday; 
                }
                
                let timeDiff = targetTime - now;
                let days = Math.floor(timeDiff / (1000 * 60 * 60 * 24));
                let hours = Math.floor((timeDiff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                let minutes = Math.floor((timeDiff % (1000 * 60 * 60)) / (1000 * 60));
                let seconds = Math.floor((timeDiff % (1000 * 60)) / 1000);
            
                bot.sendMessage(chatId, `–ó–∞–ª–∏—à–∏–ª–æ—Å—è: ${days} –¥–Ω—ñ–≤ ${hours} –≥–æ–¥–∏–Ω ${minutes} —Ö–≤–∏–ª–∏–Ω ${seconds} —Å–µ–∫—É–Ω–¥ –¥–æ ${today === 6 || today === 0 ? '–ø–æ–Ω–µ–¥—ñ–ª–∫–∞ üíî' : '–≤–∏—Ö—ñ–¥–Ω–∏—Ö! üéâ'}`, { parse_mode: 'HTML' });

            }
            bot.sendMessage(chatId, getCountdownMessage(), { parse_mode: 'HTML' });

        } catch (err) {
            console.log(err);
            bot.sendMessage(chatId, '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—á–∏—Å–ª–µ–Ω–Ω—ñ —á–∞—Å—É –¥–æ –≤–∏—Ö—ñ–¥–Ω–∏—Ö.', { parse_mode: 'HTML' });
        }
    }
});
app.post('/send', (req, res) => {
    console.log(req.body.message);
    const message = req.body.message;

    users.forEach(userId => {
        bot.sendMessage(userId, message);
    });

    res.sendStatus(200);
});
app.post('/api/saveHomework', async (req, res) => {
    try {
        const { monday, tuesday, wednesday, thursday, friday } = req.body;
        const newHomework = new Homework({
            monday,
            tuesday,
            wednesday,
            thursday,
            friday
        });
        await newHomework.save();
        res.status(201).json({ message: 'Homework saved successfully!' });
    } catch (error) {
        console.error('Error saving homework:', error);
        res.status(500).json({ error: 'Failed to save homework', details: error.message });
    }
});
app.post('/api/updateHomework', async (req, res) => {
    try {
        const { monday, tuesday, wednesday, thursday, friday } = req.body;

        const updateResult = await Homework.findOneAndUpdate(
            {}, 
            { monday, tuesday, wednesday, thursday, friday }, 
            { new: true, upsert: true, timeout: 20000 }
        );

        if (updateResult) {
            res.status(200).json({ success: true, message: 'Homework updated successfully' });
        } else {
            res.status(404).json({ error: 'Failed to update homework', details: 'Homework not found' });
        }
    } catch (error) {
        console.error('Error updating homework:', error);
        res.status(500).json({ error: 'Failed to update homework', details: error.message });
    }
});
app.post('/api/updateSchedule', (req, res) => {
    const scheduleData = req.body;

    Schedule.findOneAndUpdate({}, scheduleData, { upsert: true, new: true })
        .then(updatedSchedule => {
            res.json({ message: 'Schedule updated successfully', updatedSchedule });
        })
        .catch(error => {
            console.error('Error updating schedule:', error);
            res.status(500).json({ message: 'Failed to update schedule' });
        });
});
app.post('/distribution', (req,res)=>{
    const distribution = req.body.distributionText;
    users.forEach(userId => {
        bot.sendMessage(userId, distribution);
    });
    res.sendStatus(200);
})
app.post('/events', async (req ,res)=>{
    try{
        const newEvent = new Events({
            name: req.body.eventName,
            date: req.body.eventDate,
            details: req.body.eventDetails
        });
        const savedEvent = await newEvent.save()
        res.status(201).json(savedEvent);
    }catch(err){
        console.error('Error saving event:', err);
        res.status(500).json({ err: 'Failed to save event' });
    }

})
bot.on('message', (msg) => {
    const userId = 1132590035;
    const chatId = msg.chat.id;
    const message = msg.text || '';

    if (chatId !== userId) {
        bot.sendMessage(userId, `New message from ${chatId}: ${message}`);
    }
});
app.get('/api/getHomework', async (req, res) => {
    try {
        const homework = await Homework.find();
        res.status(200).json(homework);
    } catch (err) {
        res.status(500).json({ message: 'Error when getting homework', error: err.message });
    }
});
app.get('/api/getSchedule', (req, res) => {
    Schedule.findOne({})
        .then(schedule => {
            res.json(schedule);
        })
        .catch(error => {
            console.error('Error fetching schedule:', error);
            res.status(500).json({ message: 'Failed to fetch schedule' });
        });
});
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});
app.get('/admin', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'admin', 'admin.html'));
});
app.listen(PORT, () => {
    console.log(`Server running on PORT: ${PORT}`);
});